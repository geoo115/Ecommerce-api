name: Railway CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ecommerce_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests with coverage
      env:
        DATABASE_URL: "postgres://postgres:test_password@localhost:5432/ecommerce_test?sslmode=disable"
        JWT_SECRET: "test-jwt-secret-key"
      run: |
        go test -v -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Check coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Total coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 71.0" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below minimum 71%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build
      run: |
        go build -v -o bin/main main.go
        echo "‚úÖ Build successful"

    - name: Test binary
      run: |
        ./bin/main --version || echo "Binary created successfully"
        ls -la bin/

  deploy-staging:
    name: Deploy to Railway (Staging)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Deploy to Railway Staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_STAGING }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway link ${{ secrets.RAILWAY_PROJECT_ID_STAGING }}
        railway up --detach
        echo "üöÄ Staging deployment initiated"

    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30

    - name: Health check
      run: |
        HEALTH_URL="${{ secrets.RAILWAY_STAGING_URL }}/health"
        echo "üè• Checking health at: $HEALTH_URL"
        for i in {1..10}; do
          if curl -f "$HEALTH_URL"; then
            echo "‚úÖ Staging health check passed"
            break
          fi
          echo "‚è≥ Attempt $i failed, retrying in 10s..."
          sleep 10
        done

  deploy-production:
    name: Deploy to Railway (Production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Deploy to Railway Production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
      run: |
        railway login --token $RAILWAY_TOKEN
        railway link ${{ secrets.RAILWAY_PROJECT_ID_PRODUCTION }}
        railway up --detach
        echo "üöÄ Production deployment initiated"

    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 45

    - name: Health check
      run: |
        HEALTH_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}/health"
        echo "üè• Checking health at: $HEALTH_URL"
        for i in {1..15}; do
          if curl -f "$HEALTH_URL"; then
            echo "‚úÖ Production health check passed"
            break
          fi
          echo "‚è≥ Attempt $i failed, retrying in 10s..."
          sleep 10
        done

    - name: Basic API test
      run: |
        BASE_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}"
        echo "üß™ Testing basic API endpoints..."
        
        # Test health endpoint
        curl -f "$BASE_URL/health"
        
        # Test metrics endpoint (if available)
        curl -f "$BASE_URL/metrics" || echo "Metrics endpoint may require auth"
        
        echo "‚úÖ Basic API tests completed"

  keep-warm:
    name: Keep Railway Service Warm
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Keep warm setup
      run: |
        echo "üî• Setting up keep-warm for Railway deployment"
        HEALTH_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}/health"
        
        # Test the health endpoint once
        curl -f "$HEALTH_URL"
        echo "‚úÖ Keep-warm ping successful"
